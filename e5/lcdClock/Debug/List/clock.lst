
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm Thu May 22 16:45:31 2025

C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _s=R5
                 	.DEF _m=R4
                 	.DEF _h=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 2d20
000034 0800      	.DB  0x20,0x2D,0x0,0x8
                 
                 _0x0:
000035 3025
000036 6432
000037 253a
000038 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
000039 3a64
00003a 3025
00003b 6432
C:\Users\Asus\Desktop\Class\e5\lcdClock\Debug\List\clock.asm(1136): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x64,0x3A,0x25,0x30,0x32,0x64,0x0
                 _0x2000003:
00003d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003e 0004      	.DW  0x04
00003f 0004      	.DW  0x04
000040 0066      	.DW  __REG_VARS*2
                 
000041 0002      	.DW  0x02
000042 0180      	.DW  __base_y_G100
000043 007a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0072 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * clock.c
                 ; *
                 ; * Created: 5/22/2025 4:27:43 PM
                 ; * Author: Asus
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;uint8_t s=45;
                 ;uint8_t m=32;
                 ;uint8_t h=8;
                 ;char lcd_buffer[32];
                 ;void main(void)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0013 lcd_init(16);
000072 e1a0      	LDI  R26,LOW(16)
000073 d08c      	RCALL _lcd_init
                 ; 0000 0014 while (1)
                 _0x3:
                 ; 0000 0015     {
                 ; 0000 0016     // Please write your application code here
                 ; 0000 0017     lcd_clear();
000074 d059      	RCALL _lcd_clear
                 ; 0000 0018     s++;
000075 9453      	INC  R5
                 ; 0000 0019     if(s>59)
000076 e3eb      	LDI  R30,LOW(59)
000077 15e5      	CP   R30,R5
000078 f450      	BRSH _0x6
                 ; 0000 001A     {
                 ; 0000 001B         s=0;
000079 2455      	CLR  R5
                 ; 0000 001C         m++;
00007a 9443      	INC  R4
                 ; 0000 001D         if(m>59)
00007b 15e4      	CP   R30,R4
00007c f430      	BRSH _0x7
                 ; 0000 001E         {
                 ; 0000 001F             m=0;
00007d 2444      	CLR  R4
                 ; 0000 0020             h++;
00007e 9473      	INC  R7
                 ; 0000 0021             if(h>23)
00007f e1e7      	LDI  R30,LOW(23)
000080 15e7      	CP   R30,R7
000081 f408      	BRSH _0x8
                 ; 0000 0022             {
                 ; 0000 0023                 h=0;
000082 2477      	CLR  R7
                 ; 0000 0024             }
                 ; 0000 0025         }
                 _0x8:
                 ; 0000 0026     }
                 _0x7:
                 ; 0000 0027     sprintf(lcd_buffer,"%02d:%02d:%02d",h,m,s);
                 _0x6:
000083 e6e0      	LDI  R30,LOW(_lcd_buffer)
000084 e0f1      	LDI  R31,HIGH(_lcd_buffer)
000085 93fa      	ST   -Y,R31
000086 93ea      	ST   -Y,R30
                +
000087 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000088 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000089 93fa      	ST   -Y,R31
00008a 93ea      	ST   -Y,R30
00008b 2de7      	MOV  R30,R7
00008c 940e 02ef 	CALL SUBOPT_0x0
00008e 2de4      	MOV  R30,R4
00008f 940e 02ef 	CALL SUBOPT_0x0
000091 2de5      	MOV  R30,R5
000092 940e 02ef 	CALL SUBOPT_0x0
000094 e08c      	LDI  R24,12
000095 940e 02a2 	CALL _sprintf
000097 9660      	ADIW R28,16
                 ; 0000 0028     lcd_puts(lcd_buffer);
000098 e6a0      	LDI  R26,LOW(_lcd_buffer)
000099 e0b1      	LDI  R27,HIGH(_lcd_buffer)
00009a d054      	RCALL _lcd_puts
                 ; 0000 0029     delay_ms(1000);
00009b eea8      	LDI  R26,LOW(1000)
00009c e0b3      	LDI  R27,HIGH(1000)
00009d 940e 032f 	CALL _delay_ms
                 ; 0000 002A     }
00009f cfd4      	RJMP _0x3
                 ; 0000 002B }
                 _0x9:
0000a0 cfff      	RJMP _0x9
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000a1 93aa      	ST   -Y,R26
0000a2 b3eb      	IN   R30,0x1B
0000a3 70ef      	ANDI R30,LOW(0xF)
0000a4 2fae      	MOV  R26,R30
0000a5 81e8      	LD   R30,Y
0000a6 7fe0      	ANDI R30,LOW(0xF0)
0000a7 2bea      	OR   R30,R26
0000a8 bbeb      	OUT  0x1B,R30
                +
0000a9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000aa 958a     +DEC R24
0000ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ac 9ada      	SBI  0x1B,2
                +
0000ad e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ae 958a     +DEC R24
0000af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000b0 98da      	CBI  0x1B,2
                +
0000b1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000b2 958a     +DEC R24
0000b3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000b4 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000b5 93aa      	ST   -Y,R26
0000b6 81a8      	LD   R26,Y
0000b7 dfe9      	RCALL __lcd_write_nibble_G100
0000b8 81e8          ld    r30,y
0000b9 95e2          swap  r30
0000ba 83e8          st    y,r30
0000bb 81a8      	LD   R26,Y
0000bc dfe4      	RCALL __lcd_write_nibble_G100
                +
0000bd e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000be 958a     +DEC R24
0000bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000c0 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000c1 93aa      	ST   -Y,R26
0000c2 81e8      	LD   R30,Y
0000c3 e0f0      	LDI  R31,0
0000c4 58e0      	SUBI R30,LOW(-__base_y_G100)
0000c5 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0000c6 81e0      	LD   R30,Z
0000c7 81a9      	LDD  R26,Y+1
0000c8 0fae      	ADD  R26,R30
0000c9 dfeb      	RCALL __lcd_write_data
0000ca 8069      	LDD  R6,Y+1
0000cb 8098      	LDD  R9,Y+0
0000cc 9622      	ADIW R28,2
0000cd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000ce e0a2      	LDI  R26,LOW(2)
0000cf 940e 02f5 	CALL SUBOPT_0x1
0000d1 e0ac      	LDI  R26,LOW(12)
0000d2 dfe2      	RCALL __lcd_write_data
0000d3 e0a1      	LDI  R26,LOW(1)
0000d4 940e 02f5 	CALL SUBOPT_0x1
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 2e9e      	MOV  R9,R30
0000d8 2e6e      	MOV  R6,R30
0000d9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0000da 93aa      	ST   -Y,R26
0000db 81a8      	LD   R26,Y
0000dc 30aa      	CPI  R26,LOW(0xA)
0000dd f011      	BREQ _0x2000005
0000de 1468      	CP   R6,R8
0000df f048      	BRLO _0x2000004
                 _0x2000005:
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 93ea      	ST   -Y,R30
0000e2 9493      	INC  R9
0000e3 2da9      	MOV  R26,R9
0000e4 dfdc      	RCALL _lcd_gotoxy
0000e5 81a8      	LD   R26,Y
0000e6 30aa      	CPI  R26,LOW(0xA)
0000e7 f409      	BRNE _0x2000007
0000e8 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0000e9 9463      	INC  R6
0000ea 9ad8      	SBI  0x1B,0
0000eb 81a8      	LD   R26,Y
0000ec dfc8      	RCALL __lcd_write_data
0000ed 98d8      	CBI  0x1B,0
0000ee c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0000ef 93ba      	ST   -Y,R27
0000f0 93aa      	ST   -Y,R26
0000f1 931a      	ST   -Y,R17
                 _0x2000008:
0000f2 81a9      	LDD  R26,Y+1
0000f3 81ba      	LDD  R27,Y+1+1
0000f4 91ed      	LD   R30,X+
0000f5 83a9      	STD  Y+1,R26
0000f6 83ba      	STD  Y+1+1,R27
0000f7 2f1e      	MOV  R17,R30
0000f8 30e0      	CPI  R30,0
0000f9 f019      	BREQ _0x200000A
0000fa 2fa1      	MOV  R26,R17
0000fb dfde      	RCALL _lcd_putchar
0000fc cff5      	RJMP _0x2000008
                 _0x200000A:
0000fd 8118      	LDD  R17,Y+0
0000fe 9623      	ADIW R28,3
0000ff 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000100 93aa      	ST   -Y,R26
000101 b3ea      	IN   R30,0x1A
000102 6fe0      	ORI  R30,LOW(0xF0)
000103 bbea      	OUT  0x1A,R30
000104 9ad2      	SBI  0x1A,2
000105 9ad0      	SBI  0x1A,0
000106 9ad1      	SBI  0x1A,1
000107 98da      	CBI  0x1B,2
000108 98d8      	CBI  0x1B,0
000109 98d9      	CBI  0x1B,1
00010a 8088      	LDD  R8,Y+0
00010b 81e8      	LD   R30,Y
00010c 58e0      	SUBI R30,-LOW(128)
                +
00010d 93e0 0182+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00010f 81e8      	LD   R30,Y
000110 54e0      	SUBI R30,-LOW(192)
                +
000111 93e0 0183+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000113 e1a4      	LDI  R26,LOW(20)
000114 e0b0      	LDI  R27,0
000115 940e 032f 	CALL _delay_ms
000117 940e 02fb 	CALL SUBOPT_0x2
000119 940e 02fb 	CALL SUBOPT_0x2
00011b 940e 02fb 	CALL SUBOPT_0x2
00011d e2a0      	LDI  R26,LOW(32)
00011e df82      	RCALL __lcd_write_nibble_G100
                +
00011f ec88     +LDI R24 , LOW ( 200 )
000120 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000121 9701     +SBIW R24 , 1
000122 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000123 e2a8      	LDI  R26,LOW(40)
000124 df90      	RCALL __lcd_write_data
000125 e0a4      	LDI  R26,LOW(4)
000126 df8e      	RCALL __lcd_write_data
000127 e8a5      	LDI  R26,LOW(133)
000128 df8c      	RCALL __lcd_write_data
000129 e0a6      	LDI  R26,LOW(6)
00012a df8a      	RCALL __lcd_write_data
00012b dfa2      	RCALL _lcd_clear
                 _0x2080002:
00012c 9621      	ADIW R28,1
00012d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00012e 93ba      	ST   -Y,R27
00012f 93aa      	ST   -Y,R26
000130 931a      	ST   -Y,R17
000131 930a      	ST   -Y,R16
000132 81aa      	LDD  R26,Y+2
000133 81bb      	LDD  R27,Y+2+1
000134 9612      	ADIW R26,2
000135 940e 0341 	CALL __GETW1P
000137 9730      	SBIW R30,0
000138 f159      	BREQ _0x2020010
000139 81aa      	LDD  R26,Y+2
00013a 81bb      	LDD  R27,Y+2+1
00013b 9614      	ADIW R26,4
00013c 940e 0341 	CALL __GETW1P
00013e 018f      	MOVW R16,R30
00013f 9730      	SBIW R30,0
000140 f061      	BREQ _0x2020012
                +
000141 3002     +CPI R16 , LOW ( 2 )
000142 e0e0     +LDI R30 , HIGH ( 2 )
000143 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000144 f098      	BRLO _0x2020013
000145 01f8      	MOVW R30,R16
000146 9731      	SBIW R30,1
000147 018f      	MOVW R16,R30
                +
000148 81aa     +LDD R26 , Y + 2
000149 81bb     +LDD R27 , Y + 2 + 1
00014a 9614     +ADIW R26 , 4
00014b 93ed     +ST X + , R30
00014c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00014d 81aa      	LDD  R26,Y+2
00014e 81bb      	LDD  R27,Y+2+1
00014f 9612      	ADIW R26,2
000150 91ed      	LD   R30,X+
000151 91fd      	LD   R31,X+
000152 9631      	ADIW R30,1
000153 93fe      	ST   -X,R31
000154 93ee      	ST   -X,R30
000155 9731      	SBIW R30,1
000156 81ac      	LDD  R26,Y+4
000157 83a0      	STD  Z+0,R26
                 _0x2020013:
000158 81aa      	LDD  R26,Y+2
000159 81bb      	LDD  R27,Y+2+1
00015a 940e 0341 	CALL __GETW1P
00015c 23ff      	TST  R31
00015d f02a      	BRMI _0x2020014
00015e 91ed      	LD   R30,X+
00015f 91fd      	LD   R31,X+
000160 9631      	ADIW R30,1
000161 93fe      	ST   -X,R31
000162 93ee      	ST   -X,R30
                 _0x2020014:
000163 c006      	RJMP _0x2020015
                 _0x2020010:
000164 81aa      	LDD  R26,Y+2
000165 81bb      	LDD  R27,Y+2+1
000166 efef      	LDI  R30,LOW(65535)
000167 efff      	LDI  R31,HIGH(65535)
000168 93ed      	ST   X+,R30
000169 93fc      	ST   X,R31
                 _0x2020015:
00016a 8119      	LDD  R17,Y+1
00016b 8108      	LDD  R16,Y+0
00016c 9625      	ADIW R28,5
00016d 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00016e 93ba      	ST   -Y,R27
00016f 93aa      	ST   -Y,R26
000170 9726      	SBIW R28,6
000171 940e 034e 	CALL __SAVELOCR6
000173 e010      	LDI  R17,0
000174 85ac      	LDD  R26,Y+12
000175 85bd      	LDD  R27,Y+12+1
000176 e0e0      	LDI  R30,LOW(0)
000177 e0f0      	LDI  R31,HIGH(0)
000178 93ed      	ST   X+,R30
000179 93fc      	ST   X,R31
                 _0x2020016:
00017a 89ea      	LDD  R30,Y+18
00017b 89fb      	LDD  R31,Y+18+1
00017c 9631      	ADIW R30,1
00017d 8bea      	STD  Y+18,R30
00017e 8bfb      	STD  Y+18+1,R31
00017f 9731      	SBIW R30,1
000180 91e4      	LPM  R30,Z
000181 2f2e      	MOV  R18,R30
000182 30e0      	CPI  R30,0
000183 f409      	BRNE PC+2
000184 c115      	RJMP _0x2020018
000185 2fe1      	MOV  R30,R17
000186 30e0      	CPI  R30,0
000187 f439      	BRNE _0x202001C
000188 3225      	CPI  R18,37
000189 f411      	BRNE _0x202001D
00018a e011      	LDI  R17,LOW(1)
00018b c002      	RJMP _0x202001E
                 _0x202001D:
00018c 940e 0303 	CALL SUBOPT_0x3
                 _0x202001E:
00018e c10a      	RJMP _0x202001B
                 _0x202001C:
00018f 30e1      	CPI  R30,LOW(0x1)
000190 f4a9      	BRNE _0x202001F
000191 3225      	CPI  R18,37
000192 f419      	BRNE _0x2020020
000193 940e 0303 	CALL SUBOPT_0x3
000195 c102      	RJMP _0x20200CC
                 _0x2020020:
000196 e012      	LDI  R17,LOW(2)
000197 e040      	LDI  R20,LOW(0)
000198 e000      	LDI  R16,LOW(0)
000199 322d      	CPI  R18,45
00019a f411      	BRNE _0x2020021
00019b e001      	LDI  R16,LOW(1)
00019c c0fc      	RJMP _0x202001B
                 _0x2020021:
00019d 322b      	CPI  R18,43
00019e f411      	BRNE _0x2020022
00019f e24b      	LDI  R20,LOW(43)
0001a0 c0f8      	RJMP _0x202001B
                 _0x2020022:
0001a1 3220      	CPI  R18,32
0001a2 f411      	BRNE _0x2020023
0001a3 e240      	LDI  R20,LOW(32)
0001a4 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001a5 c002      	RJMP _0x2020024
                 _0x202001F:
0001a6 30e2      	CPI  R30,LOW(0x2)
0001a7 f439      	BRNE _0x2020025
                 _0x2020024:
0001a8 e050      	LDI  R21,LOW(0)
0001a9 e013      	LDI  R17,LOW(3)
0001aa 3320      	CPI  R18,48
0001ab f411      	BRNE _0x2020026
0001ac 6800      	ORI  R16,LOW(128)
0001ad c0eb      	RJMP _0x202001B
                 _0x2020026:
0001ae c003      	RJMP _0x2020027
                 _0x2020025:
0001af 30e3      	CPI  R30,LOW(0x3)
0001b0 f009      	BREQ PC+2
0001b1 c0e7      	RJMP _0x202001B
                 _0x2020027:
0001b2 3320      	CPI  R18,48
0001b3 f010      	BRLO _0x202002A
0001b4 332a      	CPI  R18,58
0001b5 f008      	BRLO _0x202002B
                 _0x202002A:
0001b6 c007      	RJMP _0x2020029
                 _0x202002B:
0001b7 e0aa      	LDI  R26,LOW(10)
0001b8 9f5a      	MUL  R21,R26
0001b9 2d50      	MOV  R21,R0
0001ba 2fe2      	MOV  R30,R18
0001bb 53e0      	SUBI R30,LOW(48)
0001bc 0f5e      	ADD  R21,R30
0001bd c0db      	RJMP _0x202001B
                 _0x2020029:
0001be 2fe2      	MOV  R30,R18
0001bf 36e3      	CPI  R30,LOW(0x63)
0001c0 f449      	BRNE _0x202002F
0001c1 940e 030a 	CALL SUBOPT_0x4
0001c3 89e8      	LDD  R30,Y+16
0001c4 89f9      	LDD  R31,Y+16+1
0001c5 81a4      	LDD  R26,Z+4
0001c6 93aa      	ST   -Y,R26
0001c7 940e 0310 	CALL SUBOPT_0x5
0001c9 c0ce      	RJMP _0x2020030
                 _0x202002F:
0001ca 37e3      	CPI  R30,LOW(0x73)
0001cb f441      	BRNE _0x2020032
0001cc 940e 030a 	CALL SUBOPT_0x4
0001ce 940e 0316 	CALL SUBOPT_0x6
0001d0 940e 02d6 	CALL _strlen
0001d2 2f1e      	MOV  R17,R30
0001d3 c00a      	RJMP _0x2020033
                 _0x2020032:
0001d4 37e0      	CPI  R30,LOW(0x70)
0001d5 f461      	BRNE _0x2020035
0001d6 940e 030a 	CALL SUBOPT_0x4
0001d8 940e 0316 	CALL SUBOPT_0x6
0001da 940e 02e2 	CALL _strlenf
0001dc 2f1e      	MOV  R17,R30
0001dd 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0001de 6002      	ORI  R16,LOW(2)
0001df 770f      	ANDI R16,LOW(127)
0001e0 e030      	LDI  R19,LOW(0)
0001e1 c034      	RJMP _0x2020036
                 _0x2020035:
0001e2 36e4      	CPI  R30,LOW(0x64)
0001e3 f011      	BREQ _0x2020039
0001e4 36e9      	CPI  R30,LOW(0x69)
0001e5 f411      	BRNE _0x202003A
                 _0x2020039:
0001e6 6004      	ORI  R16,LOW(4)
0001e7 c002      	RJMP _0x202003B
                 _0x202003A:
0001e8 37e5      	CPI  R30,LOW(0x75)
0001e9 f431      	BRNE _0x202003C
                 _0x202003B:
0001ea e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0001eb e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0001ec 83ee      	STD  Y+6,R30
0001ed 83ff      	STD  Y+6+1,R31
0001ee e015      	LDI  R17,LOW(5)
0001ef c00c      	RJMP _0x202003D
                 _0x202003C:
0001f0 35e8      	CPI  R30,LOW(0x58)
0001f1 f411      	BRNE _0x202003F
0001f2 6008      	ORI  R16,LOW(8)
0001f3 c003      	RJMP _0x2020040
                 _0x202003F:
0001f4 37e8      	CPI  R30,LOW(0x78)
0001f5 f009      	BREQ PC+2
0001f6 c0a1      	RJMP _0x2020071
                 _0x2020040:
0001f7 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0001f8 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0001f9 83ee      	STD  Y+6,R30
0001fa 83ff      	STD  Y+6+1,R31
0001fb e014      	LDI  R17,LOW(4)
                 _0x202003D:
0001fc ff02      	SBRS R16,2
0001fd c014      	RJMP _0x2020042
0001fe 940e 030a 	CALL SUBOPT_0x4
000200 940e 0320 	CALL SUBOPT_0x7
000202 85ab      	LDD  R26,Y+11
000203 23aa      	TST  R26
000204 f43a      	BRPL _0x2020043
000205 85ea      	LDD  R30,Y+10
000206 85fb      	LDD  R31,Y+10+1
000207 940e 033d 	CALL __ANEGW1
000209 87ea      	STD  Y+10,R30
00020a 87fb      	STD  Y+10+1,R31
00020b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00020c 3040      	CPI  R20,0
00020d f011      	BREQ _0x2020044
00020e 5f1f      	SUBI R17,-LOW(1)
00020f c001      	RJMP _0x2020045
                 _0x2020044:
000210 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000211 c004      	RJMP _0x2020046
                 _0x2020042:
000212 940e 030a 	CALL SUBOPT_0x4
000214 940e 0320 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000216 fd00      	SBRC R16,0
000217 c011      	RJMP _0x2020047
                 _0x2020048:
000218 1715      	CP   R17,R21
000219 f478      	BRSH _0x202004A
00021a ff07      	SBRS R16,7
00021b c008      	RJMP _0x202004B
00021c ff02      	SBRS R16,2
00021d c004      	RJMP _0x202004C
00021e 7f0b      	ANDI R16,LOW(251)
00021f 2f24      	MOV  R18,R20
000220 5011      	SUBI R17,LOW(1)
000221 c001      	RJMP _0x202004D
                 _0x202004C:
000222 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000223 c001      	RJMP _0x202004E
                 _0x202004B:
000224 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000225 940e 0303 	CALL SUBOPT_0x3
000227 5051      	SUBI R21,LOW(1)
000228 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000229 2f31      	MOV  R19,R17
00022a ff01      	SBRS R16,1
00022b c017      	RJMP _0x202004F
                 _0x2020050:
00022c 3030      	CPI  R19,0
00022d f0a1      	BREQ _0x2020052
00022e ff03      	SBRS R16,3
00022f c006      	RJMP _0x2020053
000230 81ee      	LDD  R30,Y+6
000231 81ff      	LDD  R31,Y+6+1
000232 9125      	LPM  R18,Z+
000233 83ee      	STD  Y+6,R30
000234 83ff      	STD  Y+6+1,R31
000235 c005      	RJMP _0x2020054
                 _0x2020053:
000236 81ae      	LDD  R26,Y+6
000237 81bf      	LDD  R27,Y+6+1
000238 912d      	LD   R18,X+
000239 83ae      	STD  Y+6,R26
00023a 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00023b 940e 0303 	CALL SUBOPT_0x3
00023d 3050      	CPI  R21,0
00023e f009      	BREQ _0x2020055
00023f 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000240 5031      	SUBI R19,LOW(1)
000241 cfea      	RJMP _0x2020050
                 _0x2020052:
000242 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000243 e320      	LDI  R18,LOW(48)
000244 81ee      	LDD  R30,Y+6
000245 81ff      	LDD  R31,Y+6+1
000246 940e 0345 	CALL __GETW1PF
000248 87e8      	STD  Y+8,R30
000249 87f9      	STD  Y+8+1,R31
00024a 81ee      	LDD  R30,Y+6
00024b 81ff      	LDD  R31,Y+6+1
00024c 9632      	ADIW R30,2
00024d 83ee      	STD  Y+6,R30
00024e 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00024f 85e8      	LDD  R30,Y+8
000250 85f9      	LDD  R31,Y+8+1
000251 85aa      	LDD  R26,Y+10
000252 85bb      	LDD  R27,Y+10+1
000253 17ae      	CP   R26,R30
000254 07bf      	CPC  R27,R31
000255 f050      	BRLO _0x202005C
000256 5f2f      	SUBI R18,-LOW(1)
000257 85a8      	LDD  R26,Y+8
000258 85b9      	LDD  R27,Y+8+1
000259 85ea      	LDD  R30,Y+10
00025a 85fb      	LDD  R31,Y+10+1
00025b 1bea      	SUB  R30,R26
00025c 0bfb      	SBC  R31,R27
00025d 87ea      	STD  Y+10,R30
00025e 87fb      	STD  Y+10+1,R31
00025f cfef      	RJMP _0x202005A
                 _0x202005C:
000260 332a      	CPI  R18,58
000261 f028      	BRLO _0x202005D
000262 ff03      	SBRS R16,3
000263 c002      	RJMP _0x202005E
000264 5f29      	SUBI R18,-LOW(7)
000265 c001      	RJMP _0x202005F
                 _0x202005E:
000266 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000267 fd04      	SBRC R16,4
000268 c01a      	RJMP _0x2020061
000269 3321      	CPI  R18,49
00026a f420      	BRSH _0x2020063
00026b 85a8      	LDD  R26,Y+8
00026c 85b9      	LDD  R27,Y+8+1
00026d 9711      	SBIW R26,1
00026e f409      	BRNE _0x2020062
                 _0x2020063:
00026f c009      	RJMP _0x20200CD
                 _0x2020062:
000270 1753      	CP   R21,R19
000271 f010      	BRLO _0x2020067
000272 ff00      	SBRS R16,0
000273 c001      	RJMP _0x2020068
                 _0x2020067:
000274 c013      	RJMP _0x2020066
                 _0x2020068:
000275 e220      	LDI  R18,LOW(32)
000276 ff07      	SBRS R16,7
000277 c00b      	RJMP _0x2020069
000278 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000279 6100      	ORI  R16,LOW(16)
00027a ff02      	SBRS R16,2
00027b c007      	RJMP _0x202006A
00027c 7f0b      	ANDI R16,LOW(251)
00027d 934a      	ST   -Y,R20
00027e 940e 0310 	CALL SUBOPT_0x5
000280 3050      	CPI  R21,0
000281 f009      	BREQ _0x202006B
000282 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000283 940e 0303 	CALL SUBOPT_0x3
000285 3050      	CPI  R21,0
000286 f009      	BREQ _0x202006C
000287 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000288 5031      	SUBI R19,LOW(1)
000289 85a8      	LDD  R26,Y+8
00028a 85b9      	LDD  R27,Y+8+1
00028b 9712      	SBIW R26,2
00028c f008      	BRLO _0x2020059
00028d cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00028e ff00      	SBRS R16,0
00028f c008      	RJMP _0x202006D
                 _0x202006E:
000290 3050      	CPI  R21,0
000291 f031      	BREQ _0x2020070
000292 5051      	SUBI R21,LOW(1)
000293 e2e0      	LDI  R30,LOW(32)
000294 93ea      	ST   -Y,R30
000295 940e 0310 	CALL SUBOPT_0x5
000297 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000298 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000299 cee0      	RJMP _0x2020016
                 _0x2020018:
00029a 85ac      	LDD  R26,Y+12
00029b 85bd      	LDD  R27,Y+12+1
00029c 940e 0341 	CALL __GETW1P
00029e 940e 0355 	CALL __LOADLOCR6
0002a0 9664      	ADIW R28,20
0002a1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002a2 92ff      	PUSH R15
0002a3 2ef8      	MOV  R15,R24
0002a4 9726      	SBIW R28,6
0002a5 940e 0350 	CALL __SAVELOCR4
0002a7 940e 0328 	CALL SUBOPT_0x8
0002a9 9730      	SBIW R30,0
0002aa f419      	BRNE _0x2020072
0002ab efef      	LDI  R30,LOW(65535)
0002ac efff      	LDI  R31,HIGH(65535)
0002ad c023      	RJMP _0x2080001
                 _0x2020072:
0002ae 01de      	MOVW R26,R28
0002af 9616      	ADIW R26,6
0002b0 940e 0339 	CALL __ADDW2R15
0002b2 018d      	MOVW R16,R26
0002b3 940e 0328 	CALL SUBOPT_0x8
0002b5 83ee      	STD  Y+6,R30
0002b6 83ff      	STD  Y+6+1,R31
0002b7 e0e0      	LDI  R30,LOW(0)
0002b8 87e8      	STD  Y+8,R30
0002b9 87e9      	STD  Y+8+1,R30
0002ba 01de      	MOVW R26,R28
0002bb 961a      	ADIW R26,10
0002bc 940e 0339 	CALL __ADDW2R15
0002be 940e 0341 	CALL __GETW1P
0002c0 93fa      	ST   -Y,R31
0002c1 93ea      	ST   -Y,R30
0002c2 931a      	ST   -Y,R17
0002c3 930a      	ST   -Y,R16
0002c4 e2ee      	LDI  R30,LOW(_put_buff_G101)
0002c5 e0f1      	LDI  R31,HIGH(_put_buff_G101)
0002c6 93fa      	ST   -Y,R31
0002c7 93ea      	ST   -Y,R30
0002c8 01de      	MOVW R26,R28
0002c9 961a      	ADIW R26,10
0002ca dea3      	RCALL __print_G101
0002cb 019f      	MOVW R18,R30
0002cc 81ae      	LDD  R26,Y+6
0002cd 81bf      	LDD  R27,Y+6+1
0002ce e0e0      	LDI  R30,LOW(0)
0002cf 93ec      	ST   X,R30
0002d0 01f9      	MOVW R30,R18
                 _0x2080001:
0002d1 940e 0357 	CALL __LOADLOCR4
0002d3 962a      	ADIW R28,10
0002d4 90ff      	POP  R15
0002d5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002d6 93ba      	ST   -Y,R27
0002d7 93aa      	ST   -Y,R26
0002d8 91a9          ld   r26,y+
0002d9 91b9          ld   r27,y+
0002da 27ee          clr  r30
0002db 27ff          clr  r31
                 strlen0:
0002dc 916d          ld   r22,x+
0002dd 2366          tst  r22
0002de f011          breq strlen1
0002df 9631          adiw r30,1
0002e0 cffb          rjmp strlen0
                 strlen1:
0002e1 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002e2 93ba      	ST   -Y,R27
0002e3 93aa      	ST   -Y,R26
0002e4 27aa          clr  r26
0002e5 27bb          clr  r27
0002e6 91e9          ld   r30,y+
0002e7 91f9          ld   r31,y+
                 strlenf0:
0002e8 9005      	lpm  r0,z+
0002e9 2000          tst  r0
0002ea f011          breq strlenf1
0002eb 9611          adiw r26,1
0002ec cffb          rjmp strlenf0
                 strlenf1:
0002ed 01fd          movw r30,r26
0002ee 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _lcd_buffer:
000160           	.BYTE 0x20
                 __base_y_G100:
000180           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0002ef 27ff      	CLR  R31
0002f0 2766      	CLR  R22
0002f1 2777      	CLR  R23
0002f2 940e 0349 	CALL __PUTPARD1
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002f5 940e 00b5 	CALL __lcd_write_data
0002f7 e0a3      	LDI  R26,LOW(3)
0002f8 e0b0      	LDI  R27,0
0002f9 940c 032f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0002fb e3a0      	LDI  R26,LOW(48)
0002fc 940e 00a1 	CALL __lcd_write_nibble_G100
                +
0002fe ec88     +LDI R24 , LOW ( 200 )
0002ff e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000300 9701     +SBIW R24 , 1
000301 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000302 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000303 932a      	ST   -Y,R18
000304 85ad      	LDD  R26,Y+13
000305 85be      	LDD  R27,Y+13+1
000306 85ef      	LDD  R30,Y+15
000307 89f8      	LDD  R31,Y+15+1
000308 9509      	ICALL
000309 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00030a 89e8      	LDD  R30,Y+16
00030b 89f9      	LDD  R31,Y+16+1
00030c 9734      	SBIW R30,4
00030d 8be8      	STD  Y+16,R30
00030e 8bf9      	STD  Y+16+1,R31
00030f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000310 85ad      	LDD  R26,Y+13
000311 85be      	LDD  R27,Y+13+1
000312 85ef      	LDD  R30,Y+15
000313 89f8      	LDD  R31,Y+15+1
000314 9509      	ICALL
000315 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000316 89a8      	LDD  R26,Y+16
000317 89b9      	LDD  R27,Y+16+1
000318 9614      	ADIW R26,4
000319 940e 0341 	CALL __GETW1P
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
00031d 81ae      	LDD  R26,Y+6
00031e 81bf      	LDD  R27,Y+6+1
00031f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000320 89a8      	LDD  R26,Y+16
000321 89b9      	LDD  R27,Y+16+1
000322 9614      	ADIW R26,4
000323 940e 0341 	CALL __GETW1P
000325 87ea      	STD  Y+10,R30
000326 87fb      	STD  Y+10+1,R31
000327 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000328 01de      	MOVW R26,R28
000329 961c      	ADIW R26,12
00032a 940e 0339 	CALL __ADDW2R15
00032c 940e 0341 	CALL __GETW1P
00032e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00032f 9610      	adiw r26,0
000330 f039      	breq __delay_ms1
                 __delay_ms0:
000331 95a8      	wdr
                +
000332 ed80     +LDI R24 , LOW ( 0x7D0 )
000333 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000334 9701     +SBIW R24 , 1
000335 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000336 9711      	sbiw r26,1
000337 f7c9      	brne __delay_ms0
                 __delay_ms1:
000338 9508      	ret
                 
                 __ADDW2R15:
000339 2400      	CLR  R0
00033a 0daf      	ADD  R26,R15
00033b 1db0      	ADC  R27,R0
00033c 9508      	RET
                 
                 __ANEGW1:
00033d 95f1      	NEG  R31
00033e 95e1      	NEG  R30
00033f 40f0      	SBCI R31,0
000340 9508      	RET
                 
                 __GETW1P:
000341 91ed      	LD   R30,X+
000342 91fc      	LD   R31,X
000343 9711      	SBIW R26,1
000344 9508      	RET
                 
                 __GETW1PF:
000345 9005      	LPM  R0,Z+
000346 91f4      	LPM  R31,Z
000347 2de0      	MOV  R30,R0
000348 9508      	RET
                 
                 __PUTPARD1:
000349 937a      	ST   -Y,R23
00034a 936a      	ST   -Y,R22
00034b 93fa      	ST   -Y,R31
00034c 93ea      	ST   -Y,R30
00034d 9508      	RET
                 
                 __SAVELOCR6:
00034e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00034f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000350 933a      	ST   -Y,R19
                 __SAVELOCR3:
000351 932a      	ST   -Y,R18
                 __SAVELOCR2:
000352 931a      	ST   -Y,R17
000353 930a      	ST   -Y,R16
000354 9508      	RET
                 
                 __LOADLOCR6:
000355 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000356 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000357 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000358 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000359 8119      	LDD  R17,Y+1
00035a 8108      	LD   R16,Y
00035b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   4 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  23 r25:   5 r26:  97 r27:  38 r28:  14 r29:   1 r30: 152 r31:  58 
x  :  23 y  : 165 z  :  15 
Registers used: 28 out of 35 (80.0%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  52 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   5 jmp   :  23 ld    :  25 ldd   :  77 ldi   :  87 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  20 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :   8 pop   :   1 push  :   1 rcall :  17 ret   :  25 
reti  :   0 rjmp  :  59 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  58 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006b8   1666     54   1720   16384  10.5%
[.dseg] 0x000060 0x000184      0     36     36    1024   3.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
